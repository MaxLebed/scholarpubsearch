/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SeacrhForm.java
 *
 * Created on 16.04.2010, 0:28:52
 */
package scholarpubsearch;

import java.awt.event.WindowEvent;
import messages.CFP;
import messages.CfpQuery;
import messages.PublicationRequest;
import messages.Inform;
import messages.InformMessage;
import messages.Publication;
import messages.Publications;
import messages.StringAttributeList;
import jade.gui.GuiEvent;
import java.awt.Component;
import java.awt.event.WindowListener;
import java.util.ArrayList;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;

/**
 *
 * @author Aleksandr Dzyuba
 */
public class SearchForm extends javax.swing.JFrame implements WindowListener{

    private UserInputAgent myAgent;

    /** Creates new form SeacrhForm */
    public SearchForm(UserInputAgent agent) {
        myAgent = agent;
        addWindowListener(this);
        initComponents();
        initColumnSizes(jTable1, jTable1.getModel(), PublicationListModel.longValues);
        initColumnSizes(jTable2, jTable2.getModel(), SearchPanelModel.longValues);
        setUpAttributeColumn(jTable2, jTable2.getColumnModel().getColumn(0));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PublicationPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        FieldValuePanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        controlPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        arxivCheckBox = new javax.swing.JCheckBox();
        GSCheckBox = new javax.swing.JCheckBox();
        resultCountComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(scholarpubsearch.ScholarPubSearchApp.class).getContext().getResourceMap(SearchForm.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setLocationByPlatform(true);
        setName("Form"); // NOI18N

        PublicationPanel.setName("PublicationPanel"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTable1.setModel(new scholarpubsearch.PublicationListModel());
        jTable1.setFillsViewportHeight(true);
        jTable1.setName("jTable1"); // NOI18N
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout PublicationPanelLayout = new javax.swing.GroupLayout(PublicationPanel);
        PublicationPanel.setLayout(PublicationPanelLayout);
        PublicationPanelLayout.setHorizontalGroup(
            PublicationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 566, Short.MAX_VALUE)
        );
        PublicationPanelLayout.setVerticalGroup(
            PublicationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PublicationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE))
        );

        FieldValuePanel.setName("FieldValuePanel"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jTable2.setFont(resourceMap.getFont("jTable2.font")); // NOI18N
        jTable2.setModel(new SearchPanelModel());
        jTable2.setColumnSelectionAllowed(true);
        jTable2.setFillsViewportHeight(true);
        jTable2.setName("jTable2"); // NOI18N
        jTable2.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable2);
        jTable2.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout FieldValuePanelLayout = new javax.swing.GroupLayout(FieldValuePanel);
        FieldValuePanel.setLayout(FieldValuePanelLayout);
        FieldValuePanelLayout.setHorizontalGroup(
            FieldValuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 566, Short.MAX_VALUE)
        );
        FieldValuePanelLayout.setVerticalGroup(
            FieldValuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
        );

        controlPanel.setName("controlPanel"); // NOI18N

        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        arxivCheckBox.setSelected(true);
        arxivCheckBox.setText(resourceMap.getString("arxivOrgCheckBox.text")); // NOI18N
        arxivCheckBox.setName("arxivOrgCheckBox"); // NOI18N

        GSCheckBox.setText(resourceMap.getString("GoogleScholarCheckBox.text")); // NOI18N
        GSCheckBox.setName("GoogleScholarCheckBox"); // NOI18N

        resultCountComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "10", "15", "20", "25", "30", "40", "50", "100" }));
        resultCountComboBox.setName("resultCountComboBox"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
        jButton3.setName("jButton3"); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resultCountComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(41, 41, 41)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(arxivCheckBox)
                    .addComponent(GSCheckBox))
                .addGap(16, 16, 16))
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(controlPanelLayout.createSequentialGroup()
                            .addComponent(arxivCheckBox)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(GSCheckBox))
                        .addGroup(controlPanelLayout.createSequentialGroup()
                            .addGap(4, 4, 4)
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(resultCountComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(jButton2)
                        .addComponent(jButton3)))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        jSeparator1.setName("jSeparator1"); // NOI18N

        jSeparator2.setName("jSeparator2"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(FieldValuePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 566, Short.MAX_VALUE)
            .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 566, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(controlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 546, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(PublicationPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(FieldValuePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(198, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(199, 199, 199)
                    .addComponent(PublicationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //start new search
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        GuiEvent ge = new GuiEvent(this, UserInputAgent.CFP_EVENT);
        CfpQuery cfpQuery = new CfpQuery();
        PublicationRequest request = new PublicationRequest();
        //read user request from controls
        SearchPanelModel model = (SearchPanelModel) jTable2.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            Object value = model.getValueAt(i, 1);
            addRequestField(request,
                    model.getValueAt(i, 0).toString(),
                    value.toString());
        }
        //set sources for search
        StringAttributeList sources = new StringAttributeList();
        if (arxivCheckBox.isSelected()) {
            sources.getAttribute().add(dataSources.ArxivOrgAgent.SERVICE_NAME);
        }
        if (GSCheckBox.isSelected()) {
            sources.getAttribute().add(dataSources.GoogleScholarAgent.SERVICE_NAME);
        }
        cfpQuery.setSourceList(sources);
        //#publications
        cfpQuery.setResultsNumber(Integer.decode(
                resultCountComboBox.getSelectedItem().toString()));

        //send user request to myAgent
        cfpQuery.setPublicationRequest(request);
        CFP cfp = new CFP();
        cfp.setCFPQuery(cfpQuery);
        ge.addParameter(cfp);
        myAgent.postGuiEvent(ge);
    }//GEN-LAST:event_jButton1ActionPerformed

    //add field to search request
    public static void addRequestField(PublicationRequest request, String field,
            String value) {
        if (value == null || value.trim().equals("")) {
            return;
        }
        if (field.equals("Title")) {
            StringAttributeList titleKeywords = request.getTitleKeywordList();
            titleKeywords.getAttribute().add(value);
            request.setTitleKeywordList(titleKeywords);
            return;
        }
        if (field.equals("Abstract")) {
            StringAttributeList abstractKeywords = request.getAbstractKeywordList();
            abstractKeywords.getAttribute().add(value);
            request.setAbstractKeywordList(abstractKeywords);
            return;
        }
        if (field.equals("Author")) {
            StringAttributeList authors = request.getAuthorList();
            authors.getAttribute().add(value);
            request.setAuthorList(authors);
            return;
        }
        if (field.equals("From year")) {
            request.setFromYear(Integer.decode(value));
            return;
        }
        if (field.equals("To year")) {
            request.setToYear(Integer.decode(value));
            return;
        }
        if (field.equals("Year")) {
            request.setFromYear(Integer.decode(value));
            request.setToYear(Integer.decode(value));
            return;
        }
        if (field.equals("Journal")) {
            request.setJournalName(value);
            return;
        }
        if (field.equals("Subject area")) {
            request.setSubjectArea(value);
            return;
        }
        if (field.equals("With fulltext link")) {
            request.setHasFulltextLink(Boolean.parseBoolean(value));
            return;
        }
    }

    //save selected publications
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        PublicationListModel model = (PublicationListModel) jTable1.getModel();
        Publications pubs = new Publications();
        ArrayList<String> publicationIds = new ArrayList<String>();
        for (int i = 0; i < model.getRowCount(); i++) {
            if (model.getValueAt(i, 0) == Boolean.TRUE) {
                Publication p = model.getPublication(i);
                publicationIds.add(p.getId());
                pubs.getPublication().add(model.getPublication(i));
            }
        }
        myAgent.getMainFrame().addPublications(pubs);
        sendSelectedToMyAgent(publicationIds);
    }

    private void sendSelectedToMyAgent(ArrayList<String> publicationIds) {
        GuiEvent ge = new GuiEvent(this, UserInputAgent.INFORM_EVENT);
        InformMessage infMsg = new InformMessage();
        infMsg.setPublicationId(publicationIds);
        Inform inform = new Inform();
        inform.setInformMessage(infMsg);
        ge.addParameter(inform);
        myAgent.postGuiEvent(ge);
    }//GEN-LAST:event_jButton2ActionPerformed

    //select/deselect
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (jTable1.getSelectedColumn() == 0) {
            Boolean selected =
                    (Boolean) jTable1.getModel().getValueAt(
                    jTable1.getSelectedRow(), 0);
            jTable1.getModel().setValueAt(!selected, jTable1.getSelectedRow(), 0);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    //send preference to preference agent from UserInputAgent
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        PublicationListModel model = (PublicationListModel) jTable1.getModel();
        Publications pubs = new Publications();
        ArrayList<String> publicationIds = new ArrayList<String>();
        for (int i = 0; i < model.getRowCount(); i++) {
            Publication p = model.getPublication(i);
            publicationIds.add(p.getId());
            pubs.getPublication().add(model.getPublication(i));
        }
        myAgent.getMainFrame().addPublications(pubs);
        //send selected publications to myAgent
        GuiEvent ge = new GuiEvent(this, UserInputAgent.INFORM_EVENT);
        InformMessage infMsg = new InformMessage();
        infMsg.setPublicationId(publicationIds);
        Inform inform = new Inform();
        inform.setInformMessage(infMsg);
        ge.addParameter(inform);
        myAgent.postGuiEvent(ge);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void setUpAttributeColumn(JTable table, TableColumn column) {
        //Set up the editor for the sport cells.
        JComboBox comboBox = new JComboBox();
        comboBox.addItem("Title");
        comboBox.addItem("Abstract");
        comboBox.addItem("Author");
        comboBox.addItem("From year");
        comboBox.addItem("To year");
        comboBox.addItem("Journal");
        comboBox.addItem("Subject area");
        //comboBox.addItem("With fulltext link");
        column.setCellEditor(new DefaultCellEditor(comboBox));

        //Set up tool tips for the sport cells.
        DefaultTableCellRenderer renderer =
                new DefaultTableCellRenderer();
        renderer.setToolTipText("Select an attribute from list");
        column.setCellRenderer(renderer);
    }

    //show publications on search form
    public void setPublications(Publications p) {
        PublicationListModel model = (PublicationListModel) jTable1.getModel();
        if (p != null && p.getPublication() != null) {
            (model).showPublications(p);
        }
        initColumnSizes(jTable1, model, PublicationListModel.longValues);
        jTable1.setModel(model);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel FieldValuePanel;
    private javax.swing.JCheckBox GSCheckBox;
    private javax.swing.JPanel PublicationPanel;
    private javax.swing.JCheckBox arxivCheckBox;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JComboBox resultCountComboBox;
    // End of variables declaration//GEN-END:variables

    public static void initColumnSizes(JTable table,
            TableModel model, Object[] longValues) {
        if (model.getRowCount() > 0) {
            TableColumn column = null;
            Component comp = null;
            int headerWidth = 0;
            int cellWidth = 0;
            TableCellRenderer headerRenderer =
                    table.getTableHeader().getDefaultRenderer();

            for (int i = 0; i < table.getColumnCount(); i++) {
                column = table.getColumnModel().getColumn(i);

                comp = headerRenderer.getTableCellRendererComponent(
                        null, column.getHeaderValue(),
                        false, false, 0, 0);
                headerWidth = comp.getPreferredSize().width;

                comp = table.getDefaultRenderer(model.getColumnClass(i)).
                        getTableCellRendererComponent(
                        table, longValues[i],
                        false, false, 0, i);
                cellWidth = comp.getPreferredSize().width;

                column.setPreferredWidth(Math.max(headerWidth, cellWidth));
            }

        }
    }
    //after this event UserPreferenceAgent sends preferences to UserInputAgent
    public void windowClosing(WindowEvent e) {
        GuiEvent ge = new GuiEvent(this, UserInputAgent.CLOSING_EVENT);
        myAgent.postGuiEvent(ge);
    }

    public void windowOpened(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowClosed(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowIconified(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowDeiconified(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowActivated(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowDeactivated(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
